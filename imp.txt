We need to bootstrap our mini application. The easiest way of doing so is by using the custom
ng-app HTML attribute.

We can use ng-init to initialize model before a template gets rendered.

In the AngularJS, all the special HTML tags and attributes that the framework can
understand and interpret are referred to as directives.

A $scope object in AngularJS is here to expose the domain model to a view
(template). By assigning properties to scope instances, we can make new
values available to a template for rendering.

<div ng-controller="HelloCtrl">
Say hello to: <input type="text" ng-model="name"><br>
<h1>Hello, {{name}}!</h1>
</div>

var HelloCtrl = function ($scope) {
$scope.name = 'World';
}
-----------------------------------------------------------------------------------------------	
We can expose UI-specific logic to templates by defining functions on a
scope instance.

var HelloCtrl = function ($scope) {
$scope.getName = function() {
return $scope.name;
};
}
-------------------------------------------------------------------------------

The primary responsibility of a controller is to initialize scope objects. In practice,
the initialization logic consists of the following responsibilities:
• Providing initial model values
• Augmenting $scope with UI-specific behavior (functions)
Controllers are regular JavaScript functions. They don't have to extend any
framework-specific classes nor call any particular AngularJS APIs to correctly
perform their job.
-----------------------------------------------------------------------------------
Please note that a controller does the same job as the ng-init
directive, when it comes to setting up initial model values.
Controllers make it possible to express this initialization logic
in JavaScript, without cluttering HTML templates with code.
------------------------------------------------------------------------------------------
Each $scope is an instance of the Scope class. The Scope class has methods that
control the scope's lifecycle, provide event-propagation facility, and support the
template rendering process.

A new scope was created by the ng-controller directive using the Scope.$new()
method call. Wait a moment; it looks like we need to have at least one instance of a
scope to create a new scope! Indeed, AngularJS has a notation of the $rootScope
(a scope that is a parent of all the other scopes). The $rootScope instance gets
created when a new application is bootstrapped.
--------------------------------------------------------------------------------------------
The ng-controller directive is an example of a scope-creating directive. AngularJS
will create a new instance of the Scope class whenever it encounters a scope-creating
directive in the DOM tree. A newly-created scope will point to its parent scope using
the $parent property. There can be many scope-creating directives in the DOM tree
and as a result many scopes will be created.
---------------------------------------------------------------------------------------------
new scope for every element in collection(repeat using ng-repeat)
----------------------------------------------------------------------------------------
Properties defined on one scope are visible to all child scopes, provided that a
child scope doesn't redefine a property using the same name!

var HelloCtrl = function ($scope) {
};


<body ng-app ng-init="name='World'">
<h1>Hello, {{name}}</h1>
<div ng-controller="HelloCtrl">
Say hello to: <input type="text" ng-model="name">
<h2>Hello, {{name}}!</h2>
</div>
</body>
If you try to run this code, you will observe that the name variable is visible
across the whole application; even if it was defined on the top-most scope only!
This illustrates that variables are inherited down the scope hierarchy. In other
words, variables defined on a parent scope are accessible in child scopes.
-------------------------------------------------------------------------------------
Let's see how to turn an ugly, globally-defined controller definition into its
modular equivalent, before a controller is declared as follows:




var HelloCtrl = function ($scope) {
$scope.name = 'World';
}
And when using modules it looks as follows:
angular.module('hello', [])
.controller('HelloCtrl', function($scope){
$scope.name = 'World';
});
========================================================================================
AngularJS itself defines the global angular namespace. There are various utility
and convenience functions exposed in this namespace, and module is one of those
functions. A module acts as a container for other AngularJS managed objects
(controllers, services, and so on). As we are going to see shortly, there is much
more to learn about modules than simple namespacing and code organization.

To define a new module we need to provide its name as the very first argument
to the module function call. The second argument makes it possible to express
a dependency on other modules
--------------------------------------------
angular.module('hello', [])
.controller('HelloCtrl', function($scope){
$scope.name = 'World';
});
-----------------------------------------------
A call to the angular.module function returns an instance of a newly created
module. As soon as we've got access to this instance, we can start defining new
controllers. This is as easy as invoking the controller function with the
following arguments:
• Controller's name (as string)
• Controller's constructor function
=======================================================================================
ng-app 
ng-init
ng-model
ng-controller
ng-repeat
ng-disabled
ng-show
ng-class
ng-bind
ng-hide
ng-click
ng-include
ng-view
ng-template


problems/in-depth
ng-app???? empty or value 
1. scope hierarchy 40,41 page number in pdf book
2. ng-model="$parent.name">
3. Avoid direct bindings to scope's properties. Two-way data binding to
object's properties (exposed on a scope) is a preferred approach.
As a rule of thumb, you should have a dot in an expression provided
to the ng-model directive (for example, ng-model="thing.name").
4. Hierarchy of scopes and the eventing system
5. scope inheritance example
how many ng-app can be defined
textarea length example

=====================================================tutorials point


The AngularJS Components

The AngularJS framework can be divided into following three major parts -

    ng-app - This directive defines and links an AngularJS application to HTML.
	<div ng-app = "">
   ...
</div>

    ng-model - This directive binds the values of AngularJS application data to HTML input controls.
	<p>Enter your Name: <input type = "text" ng-model = "name"></p>

    ng-bind - This directive binds the AngularJS Application data to HTML tags.
	<p>Hello <span ng-bind = "name"></span>!</p>
	
	
	2. The controller function is registered in angular via the angular.module(...).controller(...) function call.
	
	3.  A controller is defined using ng-controller directive. A controller is a JavaScript object containing attributes/properties and functions. 
	Each controller accepts $scope as a parameter which refers to the application/module that controller is to control.
	
	4.  Filters are used to change modify the data and can be clubbed in expression or directives using pipe character.
	
	5. AngularJS supports modular approach. Modules are used to separate logics say services, controllers, application etc. and keep the code clean.
       We define modules in separate js files and name them as per the module.js file
	   
	   var mainApp = angular.module("mainApp", []);
	   Here we've declared an application mainApp module using angular.module function. 
	   We've passed an empty array to it. This array generally contains dependent modules.
	   
	   mainApp.controller("studentController", function($scope) {
	   we've declared a controller studentController module using mainApp.controller function.
	   
	6. Use modules
		<div ng-app = "mainApp" ng-controller = "studentController">
   ...
       <script src = "mainApp.js"></script>
       <script src = "studentController.js"></script>
	
       </div>
	   
	7. AngularJS enriches form filling and validation. We can use ng-click to handle AngularJS click on button and use $dirty and $invalid flags
	to do the validations in seemless way. 
	
	Validate data

    8. Following can be used to track error.

    $dirty - states that value has been changed.

    $invalid - states that value entered is invalid.

    $error - states the exact error.

	
	9. Use novalidate with a form declaration to disable any browser specific validation.
	
	10. Using AngularJS, we can embed HTML pages within a HTML page using ng-include directive.

<div ng-app = "" ng-controller = "studentController">
   <div ng-include = "'main.htm'"></div>
   <div ng-include = "'subjects.htm'"></div>
</div>

11. AngularJS supports Single Page Application via multiple views on a single page. To do this AngularJS has provided ng-view and ng-template directives and $routeProvider services

ng-view tag simply creates a place holder where a corresponding view (html or ng-template view) can be placed based on the configuration.

ng-template directive is used to create an html view using script tag. It contains "id" attribute which is used by $routeProvider to map a view with a controller.

$routeProvider is the key service which set the configuration of urls, map them with the corresponding html page or ng-template, and attach a controller with the same.

$routeProvider is defined as a function under config of mainApp module using key as '$routeProvider'.
================================================================================================================
>>>>>>>>>>>>Scopes>>>>>>>>>>>>>>>>>>>>>

1. Scope is a special javascript object which plays the role of joining controller with the views. Scope contains the model data. In controllers, model data is accessed via $scope object.
2. $scope is passed as first argument to controller during its constructor definition.
3. We can define functions as well in $scope.



<script>
   var mainApp = angular.module("mainApp", []);
   
   mainApp.controller("shapeController", function($scope) {
      $scope.message = "In shape controller";
      $scope.type = "Shape";
   });
</script>
=====================================================================================================================
>>>>>>>>>>>>Services>>>>>>>>>>>>>>>>>>>>>

1. Scope is a special javascript object which plays the role of joining controller with the views. Scope contains the model data. In controllers, model data is accessed via $scope object.
2. $scope is passed as first argument to controller during its constructor definition.
3. We can define functions as well in $scope.



<script>
   var mainApp = angular.module("mainApp", []);
   
   mainApp.controller("shapeController", function($scope) {
      $scope.message = "In shape controller";
      $scope.type = "Shape";
   });
</script>
=====================================================================================================================
